import * as React from "react";
import { RouteComponentProps } from "react-router-dom";

import { Code } from "~/components/code";

export class Euler extends React.Component<RouteComponentProps<void>, {}> {
  /**
   * React render
   */
  render() {
    // tslint:disable:jsx-no-multiline-js
    return (
      <div className="group">
        <article className="g-24 g-md-16 g-md-p-4 euler">
          <header>
            <h2>Project Euler</h2>
          </header>
          <section>
            <p>Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve.</p>
            <p>Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems.</p>
            <p>Below there are a few examples of the problems and the code I wrote to solve them. More can be found on my <a href="https://github.com/NckHmml/Euler/">Github</a>.</p>
          </section>
          <section>
            <h3>Factorial digit sum</h3>
            <p>
              n! means n × (n − 1) × ... × 3 × 2 × 1<br />
              For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,<br />
              and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.<br />
              Find the sum of the digits in the number 100!
            </p>
            <Code>{`public static string Run()
{
    int start = 100;
    BigInteger result = 100;
    while (start > 1)
        result *= --start;
    return result.ToString().Sum(x => x - 0x30).ToString();
}`}</Code>
          </section>
          <section>
            <h3>Triangular, pentagonal, and hexagonal</h3>
            <p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p>
            <table>
              <tbody>
                <tr>
                  <td>Triangle</td>
                  <td>&nbsp;</td>
                  <td>T<sub>n</sub>=n(n+1)/2</td>
                </tr>
                <tr>
                  <td>Pentagonal</td>
                  <td>&nbsp;</td>
                  <td>P<sub>n</sub>=n(3n−1)/2</td>
                </tr>
                <tr>
                  <td>Hexagonal</td>
                  <td>&nbsp;</td>
                  <td>H<sub>n</sub>=n(2n−1)</td>
                </tr>
              </tbody>
            </table>
            <p>
              It can be verified that T<sub>285</sub> = P<sub>165</sub> = H<sub>143</sub> = 40755.<br />
              <br />
              Find the next triangle number that is also pentagonal and hexagonal.
            </p>
            <Code>{`public static string Run()
{
    double cur;
    const int start = 165;
    for (int i = start + 1; i < 1e6; i++)
    {
        cur = CalcPenta(i);
        if (CalcInvHexa(cur) == (int)CalcInvHexa(cur))
            return cur.ToString();
    }
    return "Not found!";
}

public static double CalcTri(double n)
{
    return (n * (n + 1)) / 2d;
}

public static double CalcInvTri(double n)
{
    return (-1 + Math.Sqrt(8 * n + 1)) / 2d;
}

public static double CalcPenta(double n)
{
    return (n * (3 * n - 1)) / 2d;
}

public static double CalcInvPenta(double n)
{
    return (1 + Math.Sqrt(24 * n - 1)) / 6d;
}

public static double CalcHexa(double n)
{
    return n * (2 * n - 1);
}

public static double CalcInvHexa(double n)
{
    return (1 + Math.Sqrt(8 * n + 1)) / 4d;
}`}</Code>
          </section>
        </article>
      </div>
    );
  }
}